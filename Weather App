<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather App with Search Suggestions</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial', sans-serif;
        }

        body {
            min-height: 100vh;
            background: linear-gradient(135deg, #74b9ff, #a29bfe);
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .weather-app {
            width: 100%;
            max-width: 450px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .search-container {
            padding: 15px;
            background: #0984e3;
            position: relative;
        }

        .search-input {
            width: 100%;
            padding: 12px 15px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            outline: none;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .suggestions {
            position: absolute;
            top: 100%;
            left: 15px;
            right: 15px;
            max-height: 200px;
            overflow-y: auto;
            background: white;
            border-radius: 0 0 8px 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 10;
            display: none;
        }

        .suggestion-item {
            padding: 10px 15px;
            cursor: pointer;
            transition: background 0.2s;
        }

        .suggestion-item:hover {
            background: #f1f2f6;
        }

        .suggestion-item.highlighted {
            background: #dfe6e9;
        }

        .weather-content {
            padding: 25px;
            text-align: center;
        }

        .location {
            margin-bottom: 15px;
        }

        .location h2 {
            color: #2d3436;
            font-size: 24px;
            margin-bottom: 5px;
        }

        .location p {
            color: #636e72;
            font-size: 14px;
        }

        .current-weather {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 20px 0;
        }

        .weather-icon {
            width: 80px;
            height: 80px;
        }

        .temperature {
            display: flex;
            align-items: flex-start;
            margin-left: 15px;
        }

        .temp-value {
            font-size: 48px;
            font-weight: bold;
            color: #2d3436;
            line-height: 1;
        }

        .temp-unit {
            font-size: 20px;
            color: #636e72;
            margin-top: 5px;
        }

        .weather-description {
            text-transform: capitalize;
            color: #636e72;
            margin-bottom: 20px;
        }

        .weather-details {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 12px;
        }

        .detail-item {
            background: #f1f2f6;
            padding: 12px;
            border-radius: 8px;
            text-align: center;
        }

        .detail-label {
            font-size: 13px;
            color: #636e72;
            margin-bottom: 5px;
        }

        .detail-value {
            font-weight: bold;
            color: #2d3436;
            font-size: 16px;
        }

        .error-message {
            color: #d63031;
            text-align: center;
            padding: 20px;
            font-weight: bold;
        }

        @media (max-width: 480px) {
            .weather-app {
                max-width: 100%;
            }
            
            .temp-value {
                font-size: 40px;
            }
        }
    </style>
</head>
<body>
    <div class="weather-app">
        <div class="search-container">
            <input type="text" class="search-input" placeholder="Search for a city..." id="cityInput" autocomplete="off">
            <div class="suggestions" id="suggestions"></div>
        </div>

        <div id="error" class="error-message" style="display: none;"></div>

        <div id="weatherContent" class="weather-content">
            <div class="location">
                <h2 id="cityName">New York</h2>
                <p id="countryName">United States</p>
            </div>

            <div class="current-weather">
                <img id="weatherIcon" class="weather-icon" src="https://openweathermap.org/img/wn/01d@2x.png" alt="Weather icon">
                <div class="temperature">
                    <span id="tempValue" class="temp-value">22</span>
                    <span class="temp-unit">°C</span>
                </div>
            </div>

            <p id="weatherDesc" class="weather-description">Sunny</p>

            <div class="weather-details">
                <div class="detail-item">
                    <div class="detail-label">Feels Like</div>
                    <div id="feelsLike" class="detail-value">24°C</div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Humidity</div>
                    <div id="humidity" class="detail-value">65%</div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Wind</div>
                    <div id="windSpeed" class="detail-value">12 km/h</div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Pressure</div>
                    <div id="pressure" class="detail-value">1012 hPa</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const cityInput = document.getElementById('cityInput');
            const suggestions = document.getElementById('suggestions');
            const error = document.getElementById('error');
            const weatherContent = document.getElementById('weatherContent');
            
            const cityName = document.getElementById('cityName');
            const countryName = document.getElementById('countryName');
            const weatherIcon = document.getElementById('weatherIcon');
            const tempValue = document.getElementById('tempValue');
            const weatherDesc = document.getElementById('weatherDesc');
            const feelsLike = document.getElementById('feelsLike');
            const humidity = document.getElementById('humidity');
            const windSpeed = document.getElementById('windSpeed');
            const pressure = document.getElementById('pressure');

            // Sample data with more cities and countries
            const citiesData = [
                { city: "New York", country: "United States", temp: 22, feels_like: 24, humidity: 65, wind: 12, pressure: 1012, description: "Sunny", icon: "01d" },
                { city: "Los Angeles", country: "United States", temp: 28, feels_like: 26, humidity: 50, wind: 8, pressure: 1010, description: "Clear sky", icon: "01d" },
                { city: "London", country: "United Kingdom", temp: 18, feels_like: 16, humidity: 75, wind: 15, pressure: 1015, description: "Cloudy", icon: "03d" },
                { city: "Paris", country: "France", temp: 20, feels_like: 19, humidity: 68, wind: 14, pressure: 1013, description: "Light rain", icon: "10d" },
                { city: "Tokyo", country: "Japan", temp: 25, feels_like: 27, humidity: 70, wind: 10, pressure: 1010, description: "Partly cloudy", icon: "02d" },
                { city: "Sydney", country: "Australia", temp: 28, feels_like: 30, humidity: 60, wind: 8, pressure: 1011, description: "Clear sky", icon: "01d" },
                { city: "Berlin", country: "Germany", temp: 19, feels_like: 17, humidity: 72, wind: 13, pressure: 1014, description: "Overcast", icon: "04d" },
                { city: "Rome", country: "Italy", temp: 26, feels_like: 28, humidity: 55, wind: 9, pressure: 1012, description: "Sunny", icon: "01d" },
                { city: "Moscow", country: "Russia", temp: 15, feels_like: 12, humidity: 80, wind: 16, pressure: 1016, description: "Drizzle", icon: "09d" },
                { city: "Beijing", country: "China", temp: 23, feels_like: 25, humidity: 67, wind: 11, pressure: 1011, description: "Haze", icon: "50d" },
                { city: "Cairo", country: "Egypt", temp: 32, feels_like: 35, humidity: 40, wind: 7, pressure: 1009, description: "Sunny", icon: "01d" },
                { city: "Rio de Janeiro", country: "Brazil", temp: 30, feels_like: 33, humidity: 65, wind: 10, pressure: 1010, description: "Partly cloudy", icon: "02d" },
                { city: "Toronto", country: "Canada", temp: 17, feels_like: 15, humidity: 70, wind: 14, pressure: 1013, description: "Cloudy", icon: "03d" },
                { city: "Dubai", country: "UAE", temp: 38, feels_like: 42, humidity: 30, wind: 5, pressure: 1008, description: "Sunny", icon: "01d" },
                { city: "Mumbai", country: "India", temp: 34, feels_like: 40, humidity: 75, wind: 9, pressure: 1007, description: "Humid", icon: "50d" }
            ];

            let selectedIndex = -1;

            function displayWeather(cityObj) {
                cityName.textContent = cityObj.city;
                countryName.textContent = cityObj.country;
                weatherIcon.src = `https://openweathermap.org/img/wn/${cityObj.icon}@2x.png`;
                tempValue.textContent = cityObj.temp;
                weatherDesc.textContent = cityObj.description;
                feelsLike.textContent = `${cityObj.feels_like}°C`;
                humidity.textContent = `${cityObj.humidity}%`;
                windSpeed.textContent = `${cityObj.wind} km/h`;
                pressure.textContent = `${cityObj.pressure} hPa`;
                error.style.display = 'none';
                weatherContent.style.display = 'block';
            }

            function showSuggestions() {
                const input = cityInput.value.toLowerCase();
                if (!input) {
                    suggestions.style.display = 'none';
                    return;
                }

                const filtered = citiesData.filter(item => 
                    item.city.toLowerCase().includes(input) || 
                    item.country.toLowerCase().includes(input)
                );

                if (filtered.length === 0) {
                    suggestions.style.display = 'none';
                    return;
                }

                suggestions.innerHTML = filtered.map((item, index) => `
                    <div class="suggestion-item ${index === selectedIndex ? 'highlighted' : ''}" 
                         data-city="${item.city}" 
                         data-country="${item.country}"
                         data-temp="${item.temp}"
                         data-feels_like="${item.feels_like}"
                         data-humidity="${item.humidity}"
                         data-wind="${item.wind}"
                         data-pressure="${item.pressure}"
                         data-description="${item.description}"
                         data-icon="${item.icon}">
                        <strong>${item.city}</strong>, ${item.country}
                    </div>
                `).join('');

                suggestions.style.display = 'block';
            }

            function selectSuggestion(index) {
                const items = suggestions.querySelectorAll('.suggestion-item');
                if (index >= 0 && index < items.length) {
                    items.forEach(item => item.classList.remove('highlighted'));
                    items[index].classList.add('highlighted');
                    selectedIndex = index;
                }
            }

            cityInput.addEventListener('input', showSuggestions);

            cityInput.addEventListener('keydown', (e) => {
                const items = suggestions.querySelectorAll('.suggestion-item');
                
                if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    selectedIndex = (selectedIndex + 1) % items.length;
                    selectSuggestion(selectedIndex);
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    selectedIndex = (selectedIndex - 1 + items.length) % items.length;
                    selectSuggestion(selectedIndex);
                } else if (e.key === 'Enter') {
                    e.preventDefault();
                    if (selectedIndex >= 0 && items[selectedIndex]) {
                        const cityObj = {
                            city: items[selectedIndex].dataset.city,
                            country: items[selectedIndex].dataset.country,
                            temp: items[selectedIndex].dataset.temp,
                            feels_like: items[selectedIndex].dataset.feels_like,
                            humidity: items[selectedIndex].dataset.humidity,
                            wind: items[selectedIndex].dataset.wind,
                            pressure: items[selectedIndex].dataset.pressure,
                            description: items[selectedIndex].dataset.description,
                            icon: items[selectedIndex].dataset.icon
                        };
                        displayWeather(cityObj);
                        suggestions.style.display = 'none';
                        cityInput.value = cityObj.city;
                    }
                }
            });

            suggestions.addEventListener('click', (e) => {
                const item = e.target.closest('.suggestion-item');
                if (item) {
                    const cityObj = {
                        city: item.dataset.city,
                        country: item.dataset.country,
                        temp: item.dataset.temp,
                        feels_like: item.dataset.feels_like,
                        humidity: item.dataset.humidity,
                        wind: item.dataset.wind,
                        pressure: item.dataset.pressure,
                        description: item.dataset.description,
                        icon: item.dataset.icon
                    };
                    displayWeather(cityObj);
                    suggestions.style.display = 'none';
                    cityInput.value = cityObj.city;
                }
            });

            document.addEventListener('click', (e) => {
                if (!cityInput.contains(e.target)) {
                    suggestions.style.display = 'none';
                }
            });

            // Display default weather
            displayWeather(citiesData[0]);
        });
    </script>
</body>
</html>
